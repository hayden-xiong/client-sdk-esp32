#pragma once

#ifdef __cplusplus
extern "C" {
#endif

#include <stdbool.h>

/// @brief  LiveKit room handle
typedef void *livekit_handle_t;

/// @brief LiveKit error code
typedef enum {
    LIVEKIT_ERR_NONE        =  0,  // Success
    LIVEKIT_ERR_INVALID_ARG = -1,  // Invalid argument
    LIVEKIT_ERR_NO_MEM      = -2,  // Not enough memory
    LIVEKIT_ERR_RTC         = -3,  // WebRTC error
} livekit_err_t;

/// @brief  LiveKit event type
typedef enum {
    LIVEKIT_EVENT_NONE,           // None event
    LIVEKIT_EVENT_CONNECTED,      // Room connected
    LIVEKIT_EVENT_DISCONNECTED,   // Room disconnected
    LIVEKIT_EVENT_DATA_RECEIVED,  // Data received
} livekit_event_type_t;

/// @brief  LiveKit event detail specific to each event type
typedef union {
    // TODO: Add event detail specific to each event type
} livekit_event_detail_t;

/// @brief  LiveKit event
typedef struct {
    livekit_event_type_t type;      // Event type
    livekit_event_detail_t detail;  // Event detail specific to the event type
} livekit_event_t;

/// @brief  LiveKit room event handler
/// @param[in]  event  LiveKit event
/// @param[in]  ctx    User context
/// @return  Whether or not the event was handled
typedef bool (*livekit_event_handler_t)(livekit_event_t *event);

/// @brief  Data for performing an RPC
typedef struct {
    char* destination_identity; // Identity of the destination participant
    char* method;               // Method to call
    char* payload;              // Payload passed to the method
    int response_timeout_ms;    // Response timeout in milliseconds
} livekit_perform_rpc_data_t;

/// @brief Video direction flags (bitmask)
typedef enum {
    LIVEKIT_VIDEO_DIR_NONE = 0x00,  // Disable video publish and subscribe
    LIVEKIT_VIDEO_DIR_PUB  = 0x01,  // Enable video publish only
    LIVEKIT_VIDEO_DIR_SUB  = 0x02,  // Enable video subscribe only
    LIVEKIT_VIDEO_DIR_BOTH = 0x03,  // Enable video publish and subscribe (two-way)
} livekit_video_dir_t;

 /// @brief Audio direction flags (bitmask)
typedef enum {
    LIVEKIT_AUDIO_DIR_NONE = 0x00,  // Disable audio publish and subscribe
    LIVEKIT_AUDIO_DIR_PUB  = 0x01,  // Enable audio publish only
    LIVEKIT_AUDIO_DIR_SUB  = 0x02,  // Enable audio subscribe only
    LIVEKIT_AUDIO_DIR_BOTH = 0x03,  // Enable audio publish and subscribe (two-way)
} livekit_audio_dir_t;

/// @brief Options used when connecting to a room
typedef struct {
    char *server_url;  // LiveKit server URL (e.g. wss://livekit.example.com)
    char *token;  // Valid access token generated by your server
    livekit_event_handler_t event_handler;  // Event handler

    livekit_audio_dir_t audio_dir;  // Audio direction
    livekit_video_dir_t video_dir;  // Video direction
} livekit_options_t;

#ifdef __cplusplus
}
#endif